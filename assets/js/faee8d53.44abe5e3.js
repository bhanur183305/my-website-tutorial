"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[2686],{3657:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var r=n(4848),o=n(8453);const s={sidebar_position:29},i="Python Iterators",a={id:"python/Python-Iterators",title:"Python-Iterators",description:"In Python, an iterator is an object that allows you to traverse through a sequence of elements, one at a time, without having to know the underlying structure of the data. It provides a common interface for iterating over various types of data structures, such as lists, tuples, dictionaries, strings, and more.",source:"@site/docs/python/Python-Iterators.md",sourceDirName:"python",slug:"/python/Python-Iterators",permalink:"/my-website-tutorial/docs/python/Python-Iterators",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/Python-Iterators.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{sidebar_position:29},sidebar:"tutorialSidebar",previous:{title:"Python-Polymorphism",permalink:"/my-website-tutorial/docs/python/Python-Polymorphism"},next:{title:"Python-Math",permalink:"/my-website-tutorial/docs/python/Python-Math"}},l={},h=[{value:"Creating Custom Iterators",id:"creating-custom-iterators",level:3},{value:"Iterator vs. Iterable",id:"iterator-vs-iterable",level:3}];function c(e){const t={code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"In Python, an iterator is an object that allows you to traverse through a sequence of elements, one at a time, without having to know the underlying structure of the data. It provides a common interface for iterating over various types of data structures, such as lists, tuples, dictionaries, strings, and more."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h1,{id:"python-iterators",children:"Python Iterators"}),"\n",(0,r.jsxs)(t.p,{children:["The iterator object must implement two methods: ",(0,r.jsx)(t.code,{children:"__iter__()"})," and ",(0,r.jsx)(t.code,{children:"__next__()"}),". The ",(0,r.jsx)(t.code,{children:"__iter__()"})," method returns the iterator object itself, and the ",(0,r.jsx)(t.code,{children:"__next__()"})," method returns the next element from the sequence. When there are no more elements to be returned, the ",(0,r.jsx)(t.code,{children:"__next__()"})," method raises a ",(0,r.jsx)(t.code,{children:"StopIteration"})," exception to signal the end of the iteration."]}),"\n",(0,r.jsx)(t.p,{children:"Here's a simple example of creating and using an iterator in Python:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class MyIterator:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.index = 0\r\n\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self.index < len(self.data):\r\n            current_element = self.data[self.index]\r\n            self.index += 1\r\n            return current_element\r\n        else:\r\n            raise StopIteration\r\n\r\n# Creating an iterable object\r\nmy_list = [1, 2, 3, 4, 5]\r\nmy_iterator = MyIterator(my_list)\r\n\r\n# Iterating through the elements using the iterator\r\nfor element in my_iterator:\r\n    print(element)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"1\r\n2\r\n3\r\n4\r\n5\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, we have defined a custom iterator ",(0,r.jsx)(t.code,{children:"MyIterator"}),", which takes a list ",(0,r.jsx)(t.code,{children:"data"})," as input. The ",(0,r.jsx)(t.code,{children:"__iter__()"})," method returns the iterator object itself, and the ",(0,r.jsx)(t.code,{children:"__next__()"})," method returns each element of the list one by one until the end of the list is reached."]}),"\n",(0,r.jsxs)(t.p,{children:["Iterators are extensively used in Python, especially in ",(0,r.jsx)(t.code,{children:"for"})," loops, to efficiently iterate over large data sets or streams without loading the entire data into memory. Many built-in Python objects, such as lists and dictionaries, are iterable, and you can create custom iterators to work with your own data structures or data sources."]}),"\n",(0,r.jsx)(t.h3,{id:"creating-custom-iterators",children:"Creating Custom Iterators"}),"\n",(0,r.jsxs)(t.p,{children:["Creating custom iterators in Python involves defining a class with the ",(0,r.jsx)(t.code,{children:"__iter__()"})," and ",(0,r.jsx)(t.code,{children:"__next__()"})," methods. These methods allow the class to behave as an iterator, enabling you to loop through the elements of your custom object using ",(0,r.jsx)(t.code,{children:"for"})," loops or other iteration contexts. The ",(0,r.jsx)(t.code,{children:"__iter__()"})," method returns the iterator object itself, and the ",(0,r.jsx)(t.code,{children:"__next__()"})," method returns the next element from the sequence."]}),"\n",(0,r.jsx)(t.p,{children:"Let's create a custom iterator for a simple range of numbers:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class MyRange:\r\n    def __init__(self, start, end):\r\n        self.start = start\r\n        self.end = end\r\n        self.current = start\r\n\r\n    def __iter__(self):\r\n        # The __iter__() method should return the iterator object itself (in this case, the instance of MyRange)\r\n        return self\r\n\r\n    def __next__(self):\r\n        # The __next__() method should return the next element from the sequence or raise StopIteration when done.\r\n        if self.current >= self.end:\r\n            raise StopIteration\r\n        else:\r\n            current_value = self.current\r\n            self.current += 1\r\n            return current_value\r\n\r\n# Creating a custom iterable object using our custom iterator\r\nmy_range = MyRange(1, 5)\r\n\r\n# Iterating through the custom iterator using a for loop\r\nfor num in my_range:\r\n    print(num)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"1\r\n2\r\n3\r\n4\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, we created a custom iterator ",(0,r.jsx)(t.code,{children:"MyRange"})," that generates a range of numbers from ",(0,r.jsx)(t.code,{children:"start"})," to ",(0,r.jsx)(t.code,{children:"end - 1"}),". The ",(0,r.jsx)(t.code,{children:"__init__()"})," method initializes the starting and ending values for the range, and the ",(0,r.jsx)(t.code,{children:"__iter__()"})," method returns the iterator object (in this case, the instance of ",(0,r.jsx)(t.code,{children:"MyRange"})," itself). The ",(0,r.jsx)(t.code,{children:"__next__()"})," method returns the current value and increments the ",(0,r.jsx)(t.code,{children:"current"})," value for the next iteration until the end of the range is reached, at which point it raises the ",(0,r.jsx)(t.code,{children:"StopIteration"})," exception to signal the end of the iteration."]}),"\n",(0,r.jsx)(t.p,{children:"Creating custom iterators allows you to define how your objects should be iterated over, providing flexibility and customization in iterating through complex data structures or generating values on-the-fly."}),"\n",(0,r.jsx)(t.h3,{id:"iterator-vs-iterable",children:"Iterator vs. Iterable"}),"\n",(0,r.jsx)(t.p,{children:"Iterator and Iterable are related concepts in Python, but they serve different purposes and have distinct roles in the iteration process:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Iterable:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"An Iterable is an object that can be iterated over, meaning it can generate an iterator."}),"\n",(0,r.jsxs)(t.li,{children:["It is any object that implements the ",(0,r.jsx)(t.code,{children:"__iter__()"})," method. This method returns an iterator object."]}),"\n",(0,r.jsx)(t.li,{children:"Examples of built-in Python iterables include lists, tuples, strings, dictionaries, sets, and more."}),"\n",(0,r.jsxs)(t.li,{children:["You can use an iterable in a ",(0,r.jsx)(t.code,{children:"for"})," loop or other iteration contexts directly."]}),"\n",(0,r.jsxs)(t.li,{children:["When you use an iterable in a ",(0,r.jsx)(t.code,{children:"for"})," loop, Python automatically calls its ",(0,r.jsx)(t.code,{children:"__iter__()"})," method to obtain an iterator."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Example of an iterable:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"my_list = [1, 2, 3, 4, 5]\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Iterator:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"An Iterator is an object that enables iteration over the elements of an iterable."}),"\n",(0,r.jsxs)(t.li,{children:["It is any object that implements the ",(0,r.jsx)(t.code,{children:"__iter__()"})," and ",(0,r.jsx)(t.code,{children:"__next__()"})," methods."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"__iter__()"})," method returns the iterator object itself (usually ",(0,r.jsx)(t.code,{children:"self"}),"), and the ",(0,r.jsx)(t.code,{children:"__next__()"})," method returns the next element from the sequence."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"__next__()"})," method is called during iteration to get the next element, and it raises the ",(0,r.jsx)(t.code,{children:"StopIteration"})," exception when there are no more elements to be returned."]}),"\n",(0,r.jsxs)(t.li,{children:["You can use an iterator to manually loop through the elements of an iterable one by one using the ",(0,r.jsx)(t.code,{children:"next()"})," function."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Example of an iterator:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"my_iterator = iter(my_list)\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In summary, an Iterable is an object that can produce an Iterator when its ",(0,r.jsx)(t.code,{children:"__iter__()"})," method is called. The Iterator, in turn, is responsible for providing the next element in the sequence via its ",(0,r.jsx)(t.code,{children:"__next__()"})," method. When using a ",(0,r.jsx)(t.code,{children:"for"})," loop or other iteration contexts, Python automatically handles the process of obtaining an iterator from the iterable and calling the ",(0,r.jsx)(t.code,{children:"__next__()"})," method to iterate over its elements."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);