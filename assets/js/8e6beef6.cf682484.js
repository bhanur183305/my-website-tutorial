"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[9520],{5971:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=s(4848),t=s(8453);const r={sidebar_position:32},a="Python Lambda Function",o={id:"python/Python-Lambda",title:"Python-Lambda",description:'In Python, a lambda function is a small anonymous function that can have any number of arguments but can only have one expression. Lambda functions are also known as "anonymous functions" because they don\'t have a name like regular functions defined using the def keyword.',source:"@site/docs/python/Python-Lambda.md",sourceDirName:"python",slug:"/python/Python-Lambda",permalink:"/my-website-tutorial/docs/python/Python-Lambda",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/Python-Lambda.md",tags:[],version:"current",sidebarPosition:32,frontMatter:{sidebar_position:32},sidebar:"tutorialSidebar",previous:{title:"Python-Datetime",permalink:"/my-website-tutorial/docs/python/Python-Datetime"},next:{title:"Python-Multithreading",permalink:"/my-website-tutorial/docs/python/Python-Multithreading"}},l={},d=[{value:"Map, Filter, and Reduce Functions",id:"map-filter-and-reduce-functions",level:3},{value:"Sorting with Lambda",id:"sorting-with-lambda",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:['In Python, a lambda function is a small anonymous function that can have any number of arguments but can only have one expression. Lambda functions are also known as "anonymous functions" because they don\'t have a name like regular functions defined using the ',(0,i.jsx)(n.code,{children:"def"})," keyword."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"python-lambda-function",children:"Python Lambda Function"}),"\n",(0,i.jsx)(n.p,{children:"The syntax for a lambda function is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"lambda arguments: expression\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Lambda functions are typically used for simple operations that can be expressed in a single line, such as filtering, mapping, or sorting data. They are especially useful when you need a quick function for a short period of time and don't want to define a named function using ",(0,i.jsx)(n.code,{children:"def"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple example of using a lambda function to add two numbers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"add = lambda x, y: x + y\r\nresult = add(5, 3)\r\nprint(result)  # Output: 8\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we define a lambda function called ",(0,i.jsx)(n.code,{children:"add"})," that takes two arguments ",(0,i.jsx)(n.code,{children:"x"})," and ",(0,i.jsx)(n.code,{children:"y"})," and returns their sum. We then call the lambda function with arguments ",(0,i.jsx)(n.code,{children:"5"})," and ",(0,i.jsx)(n.code,{children:"3"}),", which results in ",(0,i.jsx)(n.code,{children:"8"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"map-filter-and-reduce-functions",children:"Map, Filter, and Reduce Functions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"map()"}),", ",(0,i.jsx)(n.code,{children:"filter()"}),", and ",(0,i.jsx)(n.code,{children:"reduce()"})," are three important higher-order functions in Python that operate on iterables (e.g., lists, tuples) and allow for functional programming paradigms. They are used to transform, filter, and aggregate data efficiently."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"map()"})," function:"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"map()"})," function applies a given function to each element of an iterable and returns an iterator containing the results."]}),"\n",(0,i.jsxs)(n.li,{children:["Syntax: ",(0,i.jsx)(n.code,{children:"map(function, iterable)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example: Using ",(0,i.jsx)(n.code,{children:"map()"})," to square each element in a list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"numbers = [1, 2, 3, 4, 5]\r\nsquared_numbers = list(map(lambda x: x**2, numbers))\r\nprint(squared_numbers)  # Output: [1, 4, 9, 16, 25]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"filter()"})," function:"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"filter()"})," function filters elements from an iterable based on a given function that returns ",(0,i.jsx)(n.code,{children:"True"})," or ",(0,i.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Syntax: ",(0,i.jsx)(n.code,{children:"filter(function, iterable)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example: Using ",(0,i.jsx)(n.code,{children:"filter()"})," to get even numbers from a list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"numbers = [1, 2, 3, 4, 5]\r\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\r\nprint(even_numbers)  # Output: [2, 4]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"reduce()"})," function:"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"reduce()"})," function aggregates the elements of an iterable using a given function and returns a single value."]}),"\n",(0,i.jsxs)(n.li,{children:["Before Python 3.8, ",(0,i.jsx)(n.code,{children:"reduce()"})," was available directly in Python, but from Python 3.8 onwards, it's available in the ",(0,i.jsx)(n.code,{children:"functools"})," module."]}),"\n",(0,i.jsxs)(n.li,{children:["Syntax (using the ",(0,i.jsx)(n.code,{children:"functools"})," module): ",(0,i.jsx)(n.code,{children:"functools.reduce(function, iterable[, initializer])"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example: Using ",(0,i.jsx)(n.code,{children:"reduce()"})," to calculate the product of all elements in a list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from functools import reduce\r\n\r\nnumbers = [1, 2, 3, 4, 5]\r\nproduct = reduce(lambda x, y: x * y, numbers)\r\nprint(product)  # Output: 120 (1 * 2 * 3 * 4 * 5)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note: For simple operations like summing or finding the maximum/minimum in a list, using built-in functions like ",(0,i.jsx)(n.code,{children:"sum()"}),", ",(0,i.jsx)(n.code,{children:"max()"}),", and ",(0,i.jsx)(n.code,{children:"min()"})," is often more readable and efficient."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["These higher-order functions provide a more functional and concise way of processing data, especially when combined with lambda functions. They promote a declarative programming style and can significantly simplify code for various data transformation tasks. However, readability should always be considered, and sometimes using list comprehensions or traditional ",(0,i.jsx)(n.code,{children:"for"})," loops may be more appropriate for complex operations or when the logic becomes less clear using higher-order functions."]}),"\n",(0,i.jsx)(n.h3,{id:"sorting-with-lambda",children:"Sorting with Lambda"}),"\n",(0,i.jsxs)(n.p,{children:["In Python, you can use the built-in ",(0,i.jsx)(n.code,{children:"sorted()"})," function to sort lists, tuples, and other iterable objects. Additionally, you can use the ",(0,i.jsx)(n.code,{children:"key"})," parameter in the ",(0,i.jsx)(n.code,{children:"sorted()"})," function to specify a custom sorting criterion. Lambda functions are a concise way to define simple, anonymous functions on the fly. They are often used with ",(0,i.jsx)(n.code,{children:"sorted()"})," to define custom sorting logic quickly."]}),"\n",(0,i.jsxs)(n.p,{children:["The syntax for using ",(0,i.jsx)(n.code,{children:"sorted()"})," with a lambda function is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"sorted(iterable, key=lambda x: expression)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["where ",(0,i.jsx)(n.code,{children:"iterable"})," is the collection you want to sort, and ",(0,i.jsx)(n.code,{children:"key"})," is the lambda function that returns a value used for sorting each element ",(0,i.jsx)(n.code,{children:"x"})," in the iterable."]}),"\n",(0,i.jsxs)(n.p,{children:["Here are some examples of using ",(0,i.jsx)(n.code,{children:"sorted()"})," with lambda functions for sorting:"]}),"\n",(0,i.jsx)(n.p,{children:"Example 1: Sorting a list of strings by their lengths:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'strings_list = ["apple", "banana", "orange", "kiwi", "grapes"]\r\nsorted_list = sorted(strings_list, key=lambda x: len(x))\r\nprint(sorted_list)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"['kiwi', 'apple', 'banana', 'orange', 'grapes']\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example 2: Sorting a list of dictionaries by a specific key:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'people = [\r\n    {"name": "John", "age": 30},\r\n    {"name": "Alice", "age": 25},\r\n    {"name": "Bob", "age": 35},\r\n    {"name": "Eve", "age": 22}\r\n]\r\n\r\nsorted_people = sorted(people, key=lambda x: x["age"])\r\nprint(sorted_people)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[{'name': 'Eve', 'age': 22}, {'name': 'Alice', 'age': 25}, {'name': 'John', 'age': 30}, {'name': 'Bob', 'age': 35}]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example 3: Sorting a list of tuples based on multiple criteria:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data = [(3, 5), (1, 8), (2, 3), (4, 1)]\r\nsorted_data = sorted(data, key=lambda x: (x[0], -x[1]))  # Sort by first element ascending, and second element descending\r\nprint(sorted_data)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[(1, 8), (2, 3), (3, 5), (4, 1)]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In these examples, the lambda functions serve as the ",(0,i.jsx)(n.code,{children:"key"})," argument for ",(0,i.jsx)(n.code,{children:"sorted()"}),", allowing you to customize the sorting behavior based on your specific requirements."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);