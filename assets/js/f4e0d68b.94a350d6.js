"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[2766],{7831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(4848),i=n(8453);const o={sidebar_position:8},s="Java TypeCasting",r={id:"java/Java-TypeCasting",title:"Java-TypeCasting",description:"Type casting in Java refers to the process of converting a value from one data type to another. This is often necessary when you want to assign a value of one type to a variable of a different type, or when performing arithmetic operations involving different data types.",source:"@site/docs/java/Java-TypeCasting.md",sourceDirName:"java",slug:"/java/Java-TypeCasting",permalink:"/my-website-tutorial/docs/java/Java-TypeCasting",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-TypeCasting.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Java-Data-Types",permalink:"/my-website-tutorial/docs/java/Java-Data-Types"},next:{title:"Java-Operators",permalink:"/my-website-tutorial/docs/java/Java-Operators"}},l={},c=[];function d(e){const t={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Type casting in Java refers to the process of converting a value from one data type to another. This is often necessary when you want to assign a value of one type to a variable of a different type, or when performing arithmetic operations involving different data types."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h1,{id:"java-typecasting",children:"Java TypeCasting"}),"\n",(0,a.jsx)(t.p,{children:"There are two types of casting in Java:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Implicit Casting (Widening Conversion)"}),": This occurs when the destination data type can hold all possible values of the source data type without losing information. In implicit casting, Java automatically converts the data type of a value to a larger data type."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Explicit Casting (Narrowing Conversion)"}),": This occurs when the destination data type may not be able to hold all possible values of the source data type without losing information. In explicit casting, you explicitly specify the data type to which you want to convert the value, and Java performs the conversion if it's allowed, but there's a risk of losing data if the value is too large to fit in the destination data type."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Here's an example to illustrate both types of casting:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public class TypeCastingExample {\r\n    public static void main(String[] args) {\r\n        // Implicit Casting (Widening Conversion)\r\n        int intValue = 10;\r\n        double doubleValue = intValue; // Implicit casting from int to double\r\n        System.out.println("Double Value: " + doubleValue); // Output: 10.0\r\n\r\n        // Explicit Casting (Narrowing Conversion)\r\n        double anotherDoubleValue = 15.75;\r\n        int anotherIntValue = (int) anotherDoubleValue; // Explicit casting from double to int\r\n        System.out.println("Int Value: " + anotherIntValue); // Output: 15\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"In the example above:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Implicit casting occurs when assigning the integer value ",(0,a.jsx)(t.code,{children:"10"})," to the double variable ",(0,a.jsx)(t.code,{children:"doubleValue"}),". Since a ",(0,a.jsx)(t.code,{children:"double"})," can hold all possible values of an ",(0,a.jsx)(t.code,{children:"int"}),", Java performs the conversion automatically without any loss of information."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Explicit casting occurs when converting the double value ",(0,a.jsx)(t.code,{children:"15.75"})," to an integer. Since an ",(0,a.jsx)(t.code,{children:"int"})," cannot hold fractional values, the fractional part (",(0,a.jsx)(t.code,{children:".75"}),") is truncated, and the resulting integer value is ",(0,a.jsx)(t.code,{children:"15"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"It's important to note that when performing explicit casting, there's a risk of losing data if the value being cast is too large to fit in the destination data type. Therefore, you should use explicit casting carefully and ensure that you're not losing important information."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);