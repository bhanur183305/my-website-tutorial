"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[6972],{4324:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var s=a(4848),r=a(8453);const t={sidebar_position:20},i="Java Classes and Objects",o={id:"java/Java-Classes-Objects",title:"Java-Classes-Objects",description:"Here's a detailed explanation of classes and objects in Java, along with examples:",source:"@site/docs/java/Java-Classes-Objects.md",sourceDirName:"java",slug:"/java/Java-Classes-Objects",permalink:"/my-website-tutorial/docs/java/Java-Classes-Objects",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Classes-Objects.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Java-Object-Oriented-Programming-Concepts",permalink:"/my-website-tutorial/docs/java/Java-Object-Oriented-Programming-Concepts"},next:{title:"Java-Constructor",permalink:"/my-website-tutorial/docs/java/Java-Constructor"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Here's a detailed explanation of classes and objects in Java, along with examples:"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"java-classes-and-objects",children:"Java Classes and Objects"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Classes"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"In Java, a class is a blueprint or template for creating objects. It defines the properties (fields) and behaviors (methods) that objects of that class will have."}),"\n",(0,s.jsx)(n.p,{children:"Example of a simple class definition in Java:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Car {\r\n    // Fields (instance variables)\r\n    String make;\r\n    String model;\r\n    int year;\r\n\r\n    // Constructor\r\n    public Car(String make, String model, int year) {\r\n        this.make = make;\r\n        this.model = model;\r\n        this.year = year;\r\n    }\r\n\r\n    // Method to display information about the car\r\n    public void displayInfo() {\r\n        System.out.println("Make: " + make);\r\n        System.out.println("Model: " + model);\r\n        System.out.println("Year: " + year);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the above example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Car"})," is the name of the class."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"make"}),", ",(0,s.jsx)(n.code,{children:"model"}),", and ",(0,s.jsx)(n.code,{children:"year"})," are fields (instance variables) that represent the state of a car."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Car()"})," is a constructor method used to initialize objects of the ",(0,s.jsx)(n.code,{children:"Car"})," class with values for the fields."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"displayInfo()"})," is a method that displays information about a car."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Objects"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"An object is an instance of a class. It represents a real-world entity and encapsulates its state and behavior."}),"\n",(0,s.jsx)(n.p,{children:"Example of creating and using objects in Java:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Main {\r\n    public static void main(String[] args) {\r\n        // Creating objects of the Car class\r\n        Car car1 = new Car("Toyota", "Corolla", 2020);\r\n        Car car2 = new Car("Honda", "Civic", 2019);\r\n\r\n        // Accessing object fields and methods\r\n        System.out.println("Information about Car 1:");\r\n        car1.displayInfo();\r\n\r\n        System.out.println("\\nInformation about Car 2:");\r\n        car2.displayInfo();\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"main()"})," method:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'Car car1 = new Car("Toyota", "Corolla", 2020);'})," creates an object ",(0,s.jsx)(n.code,{children:"car1"})," of the ",(0,s.jsx)(n.code,{children:"Car"})," class with the specified values."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'Car car2 = new Car("Honda", "Civic", 2019);'})," creates another object ",(0,s.jsx)(n.code,{children:"car2"})," of the ",(0,s.jsx)(n.code,{children:"Car"})," class with different values."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"car1.displayInfo();"})," and ",(0,s.jsx)(n.code,{children:"car2.displayInfo();"})," invoke the ",(0,s.jsx)(n.code,{children:"displayInfo()"})," method on the ",(0,s.jsx)(n.code,{children:"car1"})," and ",(0,s.jsx)(n.code,{children:"car2"})," objects, respectively, to display their information."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Information about Car 1:\r\nMake: Toyota\r\nModel: Corolla\r\nYear: 2020\r\n\r\nInformation about Car 2:\r\nMake: Honda\r\nModel: Civic\r\nYear: 2019\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In summary, classes define the structure and behavior of objects, while objects represent specific instances of a class. You can create multiple objects of the same class, each with its own state and behavior. Understanding classes and objects is fundamental to object-oriented programming in Java."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var s=a(6540);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);