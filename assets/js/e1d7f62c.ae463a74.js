"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[3835],{1306:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>r});var t=n(4848),i=n(8453);const s={sidebar_position:15},l="Java Do-While Loops",a={id:"java/Java-Do-While Loops",title:"Java-Do-While Loops",description:'The "do-while" loop in Java is a control flow statement that repeatedly executes a block of code as long as a specified condition is true. Unlike the "while" loop, which tests the condition before executing the loop body, the "do-while" loop executes the loop body at least once before checking the condition for continuation. This means that the loop body will always execute at least once, regardless of whether the condition is true initially.',source:"@site/docs/java/Java-Do-While Loops.md",sourceDirName:"java",slug:"/java/Java-Do-While Loops",permalink:"/my-website-tutorial/docs/java/Java-Do-While Loops",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Do-While Loops.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Java-While Loops",permalink:"/my-website-tutorial/docs/java/Java-While Loops"},next:{title:"Java-break-countinue",permalink:"/my-website-tutorial/docs/java/Java-break-countinue"}},c={},r=[];function h(e){const o={code:"code",h1:"h1",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:'The "do-while" loop in Java is a control flow statement that repeatedly executes a block of code as long as a specified condition is true. Unlike the "while" loop, which tests the condition before executing the loop body, the "do-while" loop executes the loop body at least once before checking the condition for continuation. This means that the loop body will always execute at least once, regardless of whether the condition is true initially.'}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsx)(o.h1,{id:"java-do-while-loops",children:"Java Do-While Loops"}),"\n",(0,t.jsx)(o.p,{children:"Syntax:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"do {\r\n    // code to be executed\r\n} while (condition);\n"})}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["The ",(0,t.jsx)(o.code,{children:"do"})," keyword marks the beginning of the loop."]}),"\n",(0,t.jsxs)(o.li,{children:["The block of code enclosed within curly braces ",(0,t.jsx)(o.code,{children:"{}"})," represents the body of the loop."]}),"\n",(0,t.jsxs)(o.li,{children:["The ",(0,t.jsx)(o.code,{children:"while"})," keyword is followed by a condition that is evaluated after each execution of the loop body."]}),"\n",(0,t.jsx)(o.li,{children:"The loop continues executing as long as the condition evaluates to true."}),"\n",(0,t.jsx)(o.li,{children:"The loop terminates when the condition becomes false."}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"Example:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:'int i = 1;\r\ndo {\r\n    System.out.println("Count: " + i);\r\n    i++;\r\n} while (i <= 5);\n'})}),"\n",(0,t.jsx)(o.p,{children:"Output:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{children:"Count: 1\r\nCount: 2\r\nCount: 3\r\nCount: 4\r\nCount: 5\n"})}),"\n",(0,t.jsx)(o.p,{children:"Explanation:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["In this example, we initialize an integer variable ",(0,t.jsx)(o.code,{children:"i"})," with a value of 1 outside the loop."]}),"\n",(0,t.jsxs)(o.li,{children:["The ",(0,t.jsx)(o.code,{children:"do"})," keyword marks the beginning of the loop."]}),"\n",(0,t.jsxs)(o.li,{children:["Inside the loop body, we print the value of ",(0,t.jsx)(o.code,{children:"i"}),' along with the text "Count: ".']}),"\n",(0,t.jsxs)(o.li,{children:["We then increment the value of ",(0,t.jsx)(o.code,{children:"i"})," using the ",(0,t.jsx)(o.code,{children:"++"})," operator."]}),"\n",(0,t.jsxs)(o.li,{children:["The ",(0,t.jsx)(o.code,{children:"while"})," keyword is followed by the condition ",(0,t.jsx)(o.code,{children:"i <= 5"}),", which checks if the value of ",(0,t.jsx)(o.code,{children:"i"})," is less than or equal to 5."]}),"\n",(0,t.jsxs)(o.li,{children:["Since ",(0,t.jsx)(o.code,{children:"i"})," starts at 1 and increments with each iteration, the loop continues executing until ",(0,t.jsx)(o.code,{children:"i"})," becomes greater than 5."]}),"\n",(0,t.jsxs)(o.li,{children:["After the value of ",(0,t.jsx)(o.code,{children:"i"})," reaches 6, the condition ",(0,t.jsx)(o.code,{children:"i <= 5"})," becomes false, and the loop terminates."]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"Key Points:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:'The "do-while" loop is useful when you want to execute a block of code at least once, regardless of the condition.'}),"\n",(0,t.jsx)(o.li,{children:"Be cautious with the loop condition to avoid infinite loops. Ensure that the condition eventually becomes false to prevent the loop from running indefinitely."}),"\n"]})]})}function d(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>l,x:()=>a});var t=n(6540);const i={},s=t.createContext(i);function l(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);