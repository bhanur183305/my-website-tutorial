"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[3970],{1385:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var t=r(4848),s=r(8453);const a={sidebar_position:39},i="Java Regular Expressions",c={id:"java/Java-RegEx",title:"Java-RegEx",description:'Regular expressions, often abbreviated as "regex" or "regexp," are patterns used to match character combinations in strings. In Java, regular expressions are supported through the java.util.regex package. Here\'s a detailed explanation with examples:',source:"@site/docs/java/Java-RegEx.md",sourceDirName:"java",slug:"/java/Java-RegEx",permalink:"/my-website-tutorial/docs/java/Java-RegEx",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-RegEx.md",tags:[],version:"current",sidebarPosition:39,frontMatter:{sidebar_position:39},sidebar:"tutorialSidebar",previous:{title:"Java-Working-with-Strings",permalink:"/my-website-tutorial/docs/java/Java-Working-with-Strings"},next:{title:"Java-API",permalink:"/my-website-tutorial/docs/java/Java-API"}},l={},o=[];function h(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:['Regular expressions, often abbreviated as "regex" or "regexp," are patterns used to match character combinations in strings. In Java, regular expressions are supported through the ',(0,t.jsx)(n.code,{children:"java.util.regex"})," package. Here's a detailed explanation with examples:"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"java-regular-expressions",children:"Java Regular Expressions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pattern and Matcher Classes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Pattern"}),": Represents a compiled regular expression pattern."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Matcher"}),": Performs match operations on a character sequence by interpreting a pattern."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Basic Syntax"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Regular expressions consist of literal characters (e.g., "a", "123"), metacharacters (special characters with a reserved meaning, like "*", ".", "").'}),"\n",(0,t.jsx)(n.li,{children:"The most basic form of a regex is a sequence of characters that match exactly the same sequence of characters in the input string."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 1: Simple Match"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.regex.*;\r\n\r\nString input = "Hello, World!";\r\nString pattern = "Hello";\r\nboolean matches = Pattern.matches(pattern, input);\r\nSystem.out.println(matches); // Output: true\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Character Classes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[ ]"}),": Defines a character class. Matches any single character contained within the brackets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[^ ]"}),": Negated character class. Matches any single character not contained within the brackets."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 2: Character Class"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String input = "apple";\r\nString pattern = "[aeiou]";\r\nboolean matches = Pattern.matches(pattern, input);\r\nSystem.out.println(matches); // Output: true (matches \'a\')\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Quantifiers"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"*"}),": Matches the preceding element zero or more times."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"+"}),": Matches the preceding element one or more times."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"?"}),": Matches the preceding element zero or one time."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 3: Quantifiers"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String input = "aaabbb";\r\nString pattern = "a+"; // Matches one or more \'a\'s\r\nboolean matches = Pattern.matches(pattern, input);\r\nSystem.out.println(matches); // Output: true\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Anchors"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"^"}),": Matches the start of the string."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$"}),": Matches the end of the string."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 4: Anchors"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"String input = \"abc\";\r\nString pattern = \"^a.*c$\"; // Starts with 'a' and ends with 'c'\r\nboolean matches = Pattern.matches(pattern, input);\r\nSystem.out.println(matches); // Output: true\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Groups and Capturing"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"( )"}),": Groups multiple tokens together and creates a capturing group."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"\\n"}),": Backreference to the nth capturing group."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 5: Groups and Capturing"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String input = "apple orange";\r\nString pattern = "(\\\\w+) (\\\\w+)"; // Matches two words separated by a space\r\nPattern p = Pattern.compile(pattern);\r\nMatcher m = p.matcher(input);\r\nwhile (m.find()) {\r\n    System.out.println("Group 1: " + m.group(1)); // Output: apple\r\n    System.out.println("Group 2: " + m.group(2)); // Output: orange\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Regular expressions in Java offer powerful and flexible text-processing capabilities. However, they can also be complex and tricky to get right. It's essential to test and validate your regex patterns thoroughly, especially for more intricate use cases."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);