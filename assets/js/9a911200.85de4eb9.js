"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[9514],{2314:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>o});var r=n(4848),a=n(8453);const i={sidebar_position:23},c="java Inheritance",t={id:"java/Java-Inheritance",title:"Java-Inheritance",description:"Inheritance is a fundamental concept in object-oriented programming (OOP) where a new class (subclass or derived class) is created by extending an existing class (superclass or base class). The subclass inherits the properties (fields) and behaviors (methods) of the superclass, allowing for code reuse and the creation of hierarchical relationships between classes.",source:"@site/docs/java/Java-Inheritance.md",sourceDirName:"java",slug:"/java/Java-Inheritance",permalink:"/my-website-tutorial/docs/java/Java-Inheritance",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Inheritance.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"Java-Modifiers",permalink:"/my-website-tutorial/docs/java/Java-Modifiers"},next:{title:"Java-Polymorphism",permalink:"/my-website-tutorial/docs/java/Java-Polymorphism"}},l={},o=[];function d(e){const s={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"Inheritance is a fundamental concept in object-oriented programming (OOP) where a new class (subclass or derived class) is created by extending an existing class (superclass or base class). The subclass inherits the properties (fields) and behaviors (methods) of the superclass, allowing for code reuse and the creation of hierarchical relationships between classes."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h1,{id:"java-inheritance",children:"java Inheritance"}),"\n",(0,r.jsx)(s.p,{children:"Here's a detailed explanation of inheritance in Java along with examples:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Syntax"}),":"]}),"\n",(0,r.jsxs)(s.p,{children:["In Java, inheritance is implemented using the ",(0,r.jsx)(s.code,{children:"extends"})," keyword. The syntax for inheriting from a superclass is as follows:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"class Subclass extends Superclass {\r\n    // subclass members\r\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,r.jsxs)(s.p,{children:["Consider a superclass ",(0,r.jsx)(s.code,{children:"Vehicle"})," with properties like ",(0,r.jsx)(s.code,{children:"color"})," and methods like ",(0,r.jsx)(s.code,{children:"start()"})," and ",(0,r.jsx)(s.code,{children:"stop()"}),". We can create a subclass ",(0,r.jsx)(s.code,{children:"Car"})," that inherits from ",(0,r.jsx)(s.code,{children:"Vehicle"})," and adds additional properties and methods specific to cars."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Superclass\r\nclass Vehicle {\r\n    String color;\r\n\r\n    void start() {\r\n        System.out.println("Vehicle started.");\r\n    }\r\n\r\n    void stop() {\r\n        System.out.println("Vehicle stopped.");\r\n    }\r\n}\r\n\r\n// Subclass\r\nclass Car extends Vehicle {\r\n    int numWheels;\r\n\r\n    void accelerate() {\r\n        System.out.println("Car accelerating.");\r\n    }\r\n\r\n    void brake() {\r\n        System.out.println("Car braking.");\r\n    }\r\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Access Modifiers"}),":"]}),"\n",(0,r.jsx)(s.p,{children:"Subclasses can access superclass members based on their access modifiers:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"public"}),": Accessible from anywhere."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"protected"}),": Accessible within the same package or subclass."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"default"})," (no modifier): Accessible within the same package."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"private"}),": Not accessible in subclasses."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Overriding Methods"}),":"]}),"\n",(0,r.jsx)(s.p,{children:"Subclasses can override (redefine) superclass methods to provide their own implementation. This allows for polymorphic behavior."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Superclass\r\nclass Animal {\r\n    void makeSound() {\r\n        System.out.println("Animal makes a sound.");\r\n    }\r\n}\r\n\r\n// Subclass\r\nclass Dog extends Animal {\r\n    @Override\r\n    void makeSound() {\r\n        System.out.println("Dog barks.");\r\n    }\r\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Constructor Chaining"}),":"]}),"\n",(0,r.jsxs)(s.p,{children:["Constructors in subclasses can call constructors from the superclass using the ",(0,r.jsx)(s.code,{children:"super()"})," keyword. This allows for initialization of inherited members."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"// Superclass\r\nclass Animal {\r\n    String species;\r\n\r\n    Animal(String species) {\r\n        this.species = species;\r\n    }\r\n}\r\n\r\n// Subclass\r\nclass Dog extends Animal {\r\n    String breed;\r\n\r\n    Dog(String species, String breed) {\r\n        super(species); // Call superclass constructor\r\n        this.breed = breed;\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Super Keyword"}),":"]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"super"})," keyword in Java is used to refer to superclass members (fields, methods, and constructors). It is often used to differentiate between superclass and subclass members with the same name."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Subclass\r\nclass Car extends Vehicle {\r\n    int numWheels;\r\n\r\n    void display() {\r\n        System.out.println("Color: " + color); // Access superclass field\r\n        super.start(); // Call superclass method\r\n    }\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"In summary, inheritance in Java facilitates code reuse, promotes hierarchical relationships between classes, and allows for polymorphic behavior through method overriding. It's a powerful mechanism for building modular, extensible, and maintainable software systems."})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>t});var r=n(6540);const a={},i=r.createContext(a);function c(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);