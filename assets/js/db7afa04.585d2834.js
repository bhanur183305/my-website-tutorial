"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[7606],{2951:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=s(4848),i=s(8453);const a={sidebar_position:9},t="Java Operators",o={id:"java/Java-Operators",title:"Java-Operators",description:"Operators in Java are symbols used to perform operations on variables and values. They are classified into several categories based on their functionality, such as arithmetic operators, relational operators, logical operators, bitwise operators, assignment operators, and more. Here's a detailed explanation of each category with examples:",source:"@site/docs/java/Java-Operators.md",sourceDirName:"java",slug:"/java/Java-Operators",permalink:"/my-website-tutorial/docs/java/Java-Operators",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Operators.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Java-TypeCasting",permalink:"/my-website-tutorial/docs/java/Java-TypeCasting"},next:{title:"Java-Expressions",permalink:"/my-website-tutorial/docs/java/Java-Expressions"}},l={},c=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Operators in Java are symbols used to perform operations on variables and values. They are classified into several categories based on their functionality, such as arithmetic operators, relational operators, logical operators, bitwise operators, assignment operators, and more. Here's a detailed explanation of each category with examples:"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"java-operators",children:"Java Operators"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arithmetic Operators"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Addition (",(0,r.jsx)(n.code,{children:"+"}),"): Adds two operands."]}),"\n",(0,r.jsxs)(n.li,{children:["Subtraction (",(0,r.jsx)(n.code,{children:"-"}),"): Subtracts the second operand from the first."]}),"\n",(0,r.jsxs)(n.li,{children:["Multiplication (",(0,r.jsx)(n.code,{children:"*"}),"): Multiplies two operands."]}),"\n",(0,r.jsxs)(n.li,{children:["Division (",(0,r.jsx)(n.code,{children:"/"}),"): Divides the first operand by the second."]}),"\n",(0,r.jsxs)(n.li,{children:["Modulus (",(0,r.jsx)(n.code,{children:"%"}),"): Returns the remainder of the division operation."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int a = 10;\r\nint b = 5;\r\nint sum = a + b; // 15\r\nint difference = a - b; // 5\r\nint product = a * b; // 50\r\nint quotient = a / b; // 2\r\nint remainder = a % b; // 0\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Relational Operators"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Equal to (",(0,r.jsx)(n.code,{children:"=="}),"): Checks if two operands are equal."]}),"\n",(0,r.jsxs)(n.li,{children:["Not equal to (",(0,r.jsx)(n.code,{children:"!="}),"): Checks if two operands are not equal."]}),"\n",(0,r.jsxs)(n.li,{children:["Greater than (",(0,r.jsx)(n.code,{children:">"}),"): Checks if the left operand is greater than the right."]}),"\n",(0,r.jsxs)(n.li,{children:["Less than (",(0,r.jsx)(n.code,{children:"<"}),"): Checks if the left operand is less than the right."]}),"\n",(0,r.jsxs)(n.li,{children:["Greater than or equal to (",(0,r.jsx)(n.code,{children:">="}),"): Checks if the left operand is greater than or equal to the right."]}),"\n",(0,r.jsxs)(n.li,{children:["Less than or equal to (",(0,r.jsx)(n.code,{children:"<="}),"): Checks if the left operand is less than or equal to the right."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int x = 10;\r\nint y = 20;\r\nboolean isEqual = (x == y); // false\r\nboolean isNotEqual = (x != y); // true\r\nboolean isGreaterThan = (x > y); // false\r\nboolean isLessThan = (x < y); // true\r\nboolean isGreaterOrEqual = (x >= y); // false\r\nboolean isLessOrEqual = (x <= y); // true\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Logical Operators"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Logical AND (",(0,r.jsx)(n.code,{children:"&&"}),"): Returns true if both operands are true."]}),"\n",(0,r.jsxs)(n.li,{children:["Logical OR (",(0,r.jsx)(n.code,{children:"||"}),"): Returns true if at least one of the operands is true."]}),"\n",(0,r.jsxs)(n.li,{children:["Logical NOT (",(0,r.jsx)(n.code,{children:"!"}),"): Negates the value of the operand."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"boolean a = true;\r\nboolean b = false;\r\nboolean resultAnd = (a && b); // false\r\nboolean resultOr = (a || b); // true\r\nboolean resultNot = !a; // false\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Bitwise Operators"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Bitwise AND (",(0,r.jsx)(n.code,{children:"&"}),"): Performs a bitwise AND operation."]}),"\n",(0,r.jsxs)(n.li,{children:["Bitwise OR (",(0,r.jsx)(n.code,{children:"|"}),"): Performs a bitwise OR operation."]}),"\n",(0,r.jsxs)(n.li,{children:["Bitwise XOR (",(0,r.jsx)(n.code,{children:"^"}),"): Performs a bitwise XOR (exclusive OR) operation."]}),"\n",(0,r.jsxs)(n.li,{children:["Bitwise NOT (",(0,r.jsx)(n.code,{children:"~"}),"): Flips the bits of the operand."]}),"\n",(0,r.jsxs)(n.li,{children:["Left Shift (",(0,r.jsx)(n.code,{children:"<<"}),"): Shifts the bits to the left by a specified number of positions."]}),"\n",(0,r.jsxs)(n.li,{children:["Right Shift (",(0,r.jsx)(n.code,{children:">>"}),"): Shifts the bits to the right by a specified number of positions."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int x = 5; // Binary: 0101\r\nint y = 3; // Binary: 0011\r\nint resultAnd = x & y; // Binary: 0001 (1)\r\nint resultOr = x | y; // Binary: 0111 (7)\r\nint resultXor = x ^ y; // Binary: 0110 (6)\r\nint resultNot = ~x; // Binary: 1111 1111 1111 1111 1111 1111 1111 1010 (-6 in 2's complement)\r\nint leftShift = x << 1; // Binary: 1010 (10)\r\nint rightShift = x >> 1; // Binary: 0010 (2)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Assignment Operators"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Assignment (",(0,r.jsx)(n.code,{children:"="}),"): Assigns a value to a variable."]}),"\n",(0,r.jsxs)(n.li,{children:["Compound Assignment (e.g., ",(0,r.jsx)(n.code,{children:"+="}),", ",(0,r.jsx)(n.code,{children:"-="}),", ",(0,r.jsx)(n.code,{children:"*="}),", ",(0,r.jsx)(n.code,{children:"/="}),", ",(0,r.jsx)(n.code,{children:"%="}),"): Performs an operation and assigns the result to the variable."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int x = 10;\r\nx += 5; // Equivalent to x = x + 5; (x becomes 15)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These are the main categories of operators in Java, each serving a different purpose in performing operations on variables and values."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);