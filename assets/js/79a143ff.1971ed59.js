"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[6038],{610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=t(4848),i=t(8453);const r={sidebar_position:16},s="Java break and continue",a={id:"java/Java-break-countinue",title:"Java-break-countinue",description:"In Java, break and continue are control flow statements used within loops (such as for, while, or do-while) to alter the flow of execution.",source:"@site/docs/java/Java-break-countinue.md",sourceDirName:"java",slug:"/java/Java-break-countinue",permalink:"/my-website-tutorial/docs/java/Java-break-countinue",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-break-countinue.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Java-Do-While Loops",permalink:"/my-website-tutorial/docs/java/Java-Do-While Loops"},next:{title:"Java-Arrays-Collections",permalink:"/my-website-tutorial/docs/java/Java-Arrays-Collections"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In Java, ",(0,o.jsx)(n.code,{children:"break"})," and ",(0,o.jsx)(n.code,{children:"continue"})," are control flow statements used within loops (such as ",(0,o.jsx)(n.code,{children:"for"}),", ",(0,o.jsx)(n.code,{children:"while"}),", or ",(0,o.jsx)(n.code,{children:"do-while"}),") to alter the flow of execution."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"java-break-and-continue",children:"Java break and continue"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"break"})," statement"]}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"break"})," statement is used to exit the loop prematurely, causing the program to move to the next statement after the loop."]}),"\n",(0,o.jsxs)(n.li,{children:["It can be used in ",(0,o.jsx)(n.code,{children:"for"}),", ",(0,o.jsx)(n.code,{children:"while"}),", or ",(0,o.jsx)(n.code,{children:"do-while"})," loops."]}),"\n",(0,o.jsx)(n.li,{children:"When encountered, the loop immediately terminates, and control is transferred to the statement following the loop."}),"\n",(0,o.jsx)(n.li,{children:"It is commonly used to exit a loop when a certain condition is met, or to avoid unnecessary iterations."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"for (int i = 1; i <= 10; i++) {\r\n    if (i == 5) {\r\n        break; // exit the loop when i becomes 5\r\n    }\r\n    System.out.println(i);\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"1\r\n2\r\n3\r\n4\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"continue"})," statement"]}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"continue"})," statement is used to skip the rest of the current iteration and proceed to the next iteration of the loop."]}),"\n",(0,o.jsxs)(n.li,{children:["It can also be used in ",(0,o.jsx)(n.code,{children:"for"}),", ",(0,o.jsx)(n.code,{children:"while"}),", or ",(0,o.jsx)(n.code,{children:"do-while"})," loops."]}),"\n",(0,o.jsx)(n.li,{children:"When encountered, the current iteration of the loop is terminated, and control jumps back to the loop's condition or increment/decrement statement."}),"\n",(0,o.jsx)(n.li,{children:"It is commonly used to skip certain iterations based on a specific condition, without exiting the loop entirely."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"for (int i = 1; i <= 5; i++) {\r\n    if (i == 3) {\r\n        continue; // skip the rest of the iteration when i becomes 3\r\n    }\r\n    System.out.println(i);\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"1\r\n2\r\n4\r\n5\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["In both examples, you can see how ",(0,o.jsx)(n.code,{children:"break"})," and ",(0,o.jsx)(n.code,{children:"continue"})," alter the flow of execution within the loop. ",(0,o.jsx)(n.code,{children:"break"})," causes an immediate exit from the loop, while ",(0,o.jsx)(n.code,{children:"continue"})," skips the rest of the current iteration and proceeds to the next iteration. These statements provide flexibility and control when working with loops in Java."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);