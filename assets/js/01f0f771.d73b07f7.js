"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[1485],{2999:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(4848),a=r(8453);const o={sidebar_position:41},s="Networking and Socket Programming in Java",i={id:"java/Java-Networking-and-Socket Programming",title:"Java-Networking-and-Socket Programming",description:"Networking in Java allows developers to create networked applications that communicate over the internet or local networks. Socket programming is a key aspect of networking, enabling the creation of client-server applications where communication occurs between two endpoints.",source:"@site/docs/java/Java-Networking-and-Socket Programming.md",sourceDirName:"java",slug:"/java/Java-Networking-and-Socket Programming",permalink:"/my-website-tutorial/docs/java/Java-Networking-and-Socket Programming",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Networking-and-Socket Programming.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{sidebar_position:41},sidebar:"tutorialSidebar",previous:{title:"Java-API",permalink:"/my-website-tutorial/docs/java/Java-API"},next:{title:"Java-JDBC",permalink:"/my-website-tutorial/docs/java/Java-JDBC"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Networking in Java allows developers to create networked applications that communicate over the internet or local networks. Socket programming is a key aspect of networking, enabling the creation of client-server applications where communication occurs between two endpoints."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"networking-and-socket-programming-in-java",children:"Networking and Socket Programming in Java"}),"\n",(0,t.jsx)(n.p,{children:"Here's an overview of networking and socket programming in Java, along with examples:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Networking Basics"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Java provides classes and interfaces in the ",(0,t.jsx)(n.code,{children:"java.net"})," package for network communication."]}),"\n",(0,t.jsx)(n.li,{children:"The two primary types of network communication are TCP (Transmission Control Protocol) and UDP (User Datagram Protocol)."}),"\n",(0,t.jsx)(n.li,{children:"TCP provides reliable, connection-oriented communication, while UDP offers faster, connectionless communication."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Socket Programming"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sockets are endpoints for communication between two machines over a network."}),"\n",(0,t.jsxs)(n.li,{children:["Java provides the ",(0,t.jsx)(n.code,{children:"Socket"})," and ",(0,t.jsx)(n.code,{children:"ServerSocket"})," classes for TCP-based communication and the ",(0,t.jsx)(n.code,{children:"DatagramSocket"})," and ",(0,t.jsx)(n.code,{children:"DatagramPacket"})," classes for UDP-based communication."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"TCP Socket Programming"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"TCP socket programming involves establishing a connection between a client and a server."}),"\n",(0,t.jsxs)(n.li,{children:["Example:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Server\r\nServerSocket serverSocket = new ServerSocket(12345);\r\nSocket clientSocket = serverSocket.accept();\r\n// Handle client connection\r\n\r\n// Client\r\nSocket socket = new Socket("server_address", 12345);\r\n// Communicate with server\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"UDP Socket Programming"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"UDP socket programming is connectionless, where data is sent in the form of packets."}),"\n",(0,t.jsxs)(n.li,{children:["Example:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Server\r\nDatagramSocket serverSocket = new DatagramSocket(12345);\r\n// Receive data\r\n\r\n// Client\r\nDatagramSocket socket = new DatagramSocket();\r\n// Send data\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example: Simple TCP Client-Server Communication"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Server:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'ServerSocket serverSocket = new ServerSocket(12345);\r\nSocket clientSocket = serverSocket.accept();\r\nBufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\r\nString message = in.readLine();\r\nSystem.out.println("Message from client: " + message);\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Client:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Socket socket = new Socket("localhost", 12345);\r\nPrintWriter out = new PrintWriter(socket.getOutputStream(), true);\r\nout.println("Hello, server!");\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example: Simple UDP Communication"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Server:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'DatagramSocket serverSocket = new DatagramSocket(12345);\r\nbyte[] receiveData = new byte[1024];\r\nDatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\nserverSocket.receive(receivePacket);\r\nString message = new String(receivePacket.getData());\r\nSystem.out.println("Message from client: " + message);\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Client:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'DatagramSocket socket = new DatagramSocket();\r\nbyte[] sendData = "Hello, server!".getBytes();\r\nDatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getLocalHost(), 12345);\r\nsocket.send(sendPacket);\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These examples provide a basic understanding of socket programming in Java for both TCP and UDP communication. You can extend these examples to build more complex networked applications, such as chat servers, file transfer systems, or multiplayer games."})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);