"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[7551],{8224:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=n(4848),a=n(8453);const i={sidebar_position:19},r="Object-Oriented Programming in Java(OOPS)",o={id:"java/Java-Object-Oriented-Programming-Concepts",title:"Java-Object-Oriented-Programming-Concepts",description:"Object-oriented programming (OOP) is a programming paradigm that revolves around the concept of objects, which are instances of classes. Java is an object-oriented programming language, and it fully supports the principles and concepts of OOP.",source:"@site/docs/java/Java-Object-Oriented-Programming-Concepts.md",sourceDirName:"java",slug:"/java/Java-Object-Oriented-Programming-Concepts",permalink:"/my-website-tutorial/docs/java/Java-Object-Oriented-Programming-Concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Object-Oriented-Programming-Concepts.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19},sidebar:"tutorialSidebar",previous:{title:"Java-Methods",permalink:"/my-website-tutorial/docs/java/Java-Methods"},next:{title:"Java-Classes-Objects",permalink:"/my-website-tutorial/docs/java/Java-Classes-Objects"}},c={},l=[];function d(e){const s={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Object-oriented programming (OOP) is a programming paradigm that revolves around the concept of objects, which are instances of classes. Java is an object-oriented programming language, and it fully supports the principles and concepts of OOP."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h1,{id:"object-oriented-programming-in-javaoops",children:"Object-Oriented Programming in Java(OOPS)"}),"\n",(0,t.jsx)(s.p,{children:"Here's a detailed explanation of object-oriented programming in Java:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Classes and Objects"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"In Java, a class is a blueprint or template for creating objects. It defines the attributes (fields) and behaviors (methods) of objects belonging to that class."}),"\n",(0,t.jsx)(s.li,{children:"An object is an instance of a class. It represents a real-world entity and encapsulates data (attributes) and behavior (methods) related to that entity."}),"\n",(0,t.jsxs)(s.li,{children:["Example: In a banking application, a ",(0,t.jsx)(s.code,{children:"BankAccount"})," class can represent the blueprint for creating bank account objects. Each bank account object would have attributes such as account number, balance, and owner name, as well as methods for deposit, withdrawal, and balance inquiry."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Encapsulation"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Encapsulation is the bundling of data (attributes) and methods that operate on that data into a single unit (class)."}),"\n",(0,t.jsx)(s.li,{children:"It hides the internal state of an object from the outside world and only exposes the necessary functionalities through methods."}),"\n",(0,t.jsx)(s.li,{children:"Access modifiers (public, private, protected) are used to control the visibility of class members (fields and methods) to other classes."}),"\n",(0,t.jsxs)(s.li,{children:["Example: In the ",(0,t.jsx)(s.code,{children:"BankAccount"})," class, the balance attribute may be declared as private to prevent direct access from outside the class. Instead, methods like ",(0,t.jsx)(s.code,{children:"deposit"})," and ",(0,t.jsx)(s.code,{children:"withdraw"})," are provided to interact with the balance."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Inheritance"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Inheritance is a mechanism where a new class (subclass or derived class) is created based on an existing class (superclass or base class)."}),"\n",(0,t.jsx)(s.li,{children:"The subclass inherits the properties and behaviors of the superclass and can also have its own additional properties and behaviors."}),"\n",(0,t.jsx)(s.li,{children:"It promotes code reuse and allows for the creation of hierarchical relationships between classes."}),"\n",(0,t.jsxs)(s.li,{children:["In Java, inheritance is implemented using the ",(0,t.jsx)(s.code,{children:"extends"})," keyword."]}),"\n",(0,t.jsxs)(s.li,{children:["Example: A ",(0,t.jsx)(s.code,{children:"SavingsAccount"})," class can inherit from the ",(0,t.jsx)(s.code,{children:"BankAccount"})," class, inheriting its attributes and methods while adding specific functionalities like interest calculation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Polymorphism"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Polymorphism allows objects of different classes to be treated as objects of a common superclass."}),"\n",(0,t.jsx)(s.li,{children:"It enables a single interface to represent multiple implementations."}),"\n",(0,t.jsx)(s.li,{children:"Polymorphism can be achieved through method overriding (subclass provides a specific implementation of a method defined in its superclass) and method overloading (multiple methods with the same name but different parameter lists)."}),"\n",(0,t.jsxs)(s.li,{children:["Example: A ",(0,t.jsx)(s.code,{children:"calculateInterest"})," method in both ",(0,t.jsx)(s.code,{children:"SavingsAccount"})," and ",(0,t.jsx)(s.code,{children:"FixedDeposit"})," classes can be treated polymorphically as a generic method for calculating interest, even though the specific implementation differs for each class."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Abstraction"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Abstraction refers to the process of simplifying complex systems by modeling classes at a high level of abstraction."}),"\n",(0,t.jsx)(s.li,{children:"It focuses on the essential features of an object while hiding unnecessary details."}),"\n",(0,t.jsx)(s.li,{children:"Abstract classes and interfaces are used to achieve abstraction in Java."}),"\n",(0,t.jsxs)(s.li,{children:["Example: An abstract ",(0,t.jsx)(s.code,{children:"Shape"})," class with methods like ",(0,t.jsx)(s.code,{children:"calculateArea"})," and ",(0,t.jsx)(s.code,{children:"calculatePerimeter"})," can be used to represent various geometric shapes without specifying the implementation details for each shape."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"In Java, object-oriented programming facilitates modular, maintainable, and reusable code by organizing it into classes and objects, promoting encapsulation, inheritance, polymorphism, and abstraction. These principles enable developers to create robust, scalable, and easily extensible software systems."})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var t=n(6540);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);