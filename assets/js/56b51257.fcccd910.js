"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[784],{6020:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(4848),r=a(8453);const i={sidebar_position:29},s="Java Date",o={id:"java/Java-Date",title:"Java-Date",description:'In Java, handling dates and times is facilitated by the java.time package, introduced in Java 8 as part of the Java Date and Time API (also known as the "ThreeTen" project). This API provides classes for representing dates, times, time zones, durations, and periods, along with various utility methods for manipulation and formatting.',source:"@site/docs/java/Java-Date.md",sourceDirName:"java",slug:"/java/Java-Date",permalink:"/my-website-tutorial/docs/java/Java-Date",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Date.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{sidebar_position:29},sidebar:"tutorialSidebar",previous:{title:"Java-Enums",permalink:"/my-website-tutorial/docs/java/Java-Enums"},next:{title:"Java-Iterator",permalink:"/my-website-tutorial/docs/java/Java-Iterator"}},c={},d=[];function m(e){const t={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["In Java, handling dates and times is facilitated by the ",(0,n.jsx)(t.code,{children:"java.time"}),' package, introduced in Java 8 as part of the Java Date and Time API (also known as the "ThreeTen" project). This API provides classes for representing dates, times, time zones, durations, and periods, along with various utility methods for manipulation and formatting.']}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h1,{id:"java-date",children:"Java Date"}),"\n",(0,n.jsxs)(t.p,{children:["Here's an overview of some important classes in the ",(0,n.jsx)(t.code,{children:"java.time"})," package:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"LocalDate"}),": Represents a date without a time component (year, month, day)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"LocalTime"}),": Represents a time without a date component (hour, minute, second, nanosecond)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"LocalDateTime"}),": Represents a date and time without a time zone."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"ZonedDateTime"}),": Represents a date and time with a time zone."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Instant"}),": Represents a point in time on the time-line in UTC."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Duration"}),": Represents a time-based amount of time."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Period"}),": Represents a date-based amount of time."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Below are examples demonstrating how to work with dates in Java using these classes:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'import java.time.*;\r\n\r\npublic class DateExample {\r\n    public static void main(String[] args) {\r\n        // Creating LocalDate, LocalTime, and LocalDateTime objects\r\n        LocalDate currentDate = LocalDate.now();\r\n        LocalTime currentTime = LocalTime.now();\r\n        LocalDateTime currentDateTime = LocalDateTime.now();\r\n        \r\n        System.out.println("Current Date: " + currentDate);\r\n        System.out.println("Current Time: " + currentTime);\r\n        System.out.println("Current Date and Time: " + currentDateTime);\r\n        \r\n        // Creating a specific date\r\n        LocalDate specificDate = LocalDate.of(2023, Month.DECEMBER, 31);\r\n        System.out.println("Specific Date: " + specificDate);\r\n        \r\n        // Getting individual components of a date\r\n        int year = specificDate.getYear();\r\n        Month month = specificDate.getMonth();\r\n        int day = specificDate.getDayOfMonth();\r\n        System.out.println("Year: " + year + ", Month: " + month + ", Day: " + day);\r\n        \r\n        // Adding or subtracting days from a date\r\n        LocalDate newDate = specificDate.plusDays(7);\r\n        System.out.println("New Date after adding 7 days: " + newDate);\r\n        \r\n        // Comparing dates\r\n        LocalDate futureDate = LocalDate.of(2024, Month.JANUARY, 15);\r\n        if (futureDate.isAfter(specificDate)) {\r\n            System.out.println(futureDate + " is after " + specificDate);\r\n        }\r\n        \r\n        // Formatting dates\r\n        String formattedDate = currentDateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));\r\n        System.out.println("Formatted Date and Time: " + formattedDate);\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Output:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"Current Date: 2024-02-23\r\nCurrent Time: 15:30:45.123456789\r\nCurrent Date and Time: 2024-02-23T15:30:45.123456789\r\nSpecific Date: 2023-12-31\r\nYear: 2023, Month: DECEMBER, Day: 31\r\nNew Date after adding 7 days: 2024-01-07\r\n2024-01-15 is after 2023-12-31\r\nFormatted Date and Time: 2024-02-23 15:30:45\n"})}),"\n",(0,n.jsx)(t.p,{children:"These examples demonstrate basic operations such as creating dates, accessing their components, performing arithmetic operations, comparing dates, and formatting dates for display."})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>o});var n=a(6540);const r={},i=n.createContext(r);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);