"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[1291],{4274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const i={sidebar_position:25},r="Java Encapsulation",o={id:"java/Java-Encapsulation",title:"Java-Encapsulation",description:"Encapsulation is one of the four fundamental Object-Oriented Programming (OOP) concepts in Java, along with inheritance, polymorphism, and abstraction. It refers to the bundling of data (attributes or fields) and methods (functions or behaviors) that operate on the data into a single unit called a class. The internal state of an object is hidden from the outside world, and access to it is restricted to methods defined within the class. This allows for better control over how data is accessed and modified, as well as providing a level of security and modularity to the code.",source:"@site/docs/java/Java-Encapsulation.md",sourceDirName:"java",slug:"/java/Java-Encapsulation",permalink:"/my-website-tutorial/docs/java/Java-Encapsulation",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Encapsulation.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Java-Polymorphism",permalink:"/my-website-tutorial/docs/java/Java-Polymorphism"},next:{title:"Java-Abstraction",permalink:"/my-website-tutorial/docs/java/Java-Abstraction"}},d={},c=[];function l(e){const t={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Encapsulation is one of the four fundamental Object-Oriented Programming (OOP) concepts in Java, along with inheritance, polymorphism, and abstraction. It refers to the bundling of data (attributes or fields) and methods (functions or behaviors) that operate on the data into a single unit called a class. The internal state of an object is hidden from the outside world, and access to it is restricted to methods defined within the class. This allows for better control over how data is accessed and modified, as well as providing a level of security and modularity to the code."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h1,{id:"java-encapsulation",children:"Java Encapsulation"}),"\n",(0,a.jsx)(t.p,{children:"Here's a detailed explanation of encapsulation in Java with examples:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Data Hiding"}),": Encapsulation hides the internal state of an object from the outside world by making the data private and providing access to it only through public methods. This prevents unauthorized access and modification of the object's state, ensuring data integrity and security."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Access Modifiers"}),": In Java, access modifiers such as ",(0,a.jsx)(t.code,{children:"private"}),", ",(0,a.jsx)(t.code,{children:"protected"}),", and ",(0,a.jsx)(t.code,{children:"public"})," are used to control the visibility of class members (fields and methods). By default, class members are ",(0,a.jsx)(t.code,{children:"private"})," if no access modifier is specified, which means they are accessible only within the same class."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Getter and Setter Methods"}),": To provide controlled access to private data, getter and setter methods are used to retrieve and modify the values of the class's attributes, respectively. Getter methods are public and used to retrieve the values of private fields, while setter methods are public and used to set or update the values of private fields."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Here's an example demonstrating encapsulation in Java:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public class Person {\r\n    // Private fields\r\n    private String name;\r\n    private int age;\r\n    \r\n    // Getter method for name\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    \r\n    // Setter method for name\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    \r\n    // Getter method for age\r\n    public int getAge() {\r\n        return age;\r\n    }\r\n    \r\n    // Setter method for age\r\n    public void setAge(int age) {\r\n        if (age >= 0 && age <= 120) { // Validating age\r\n            this.age = age;\r\n        } else {\r\n            System.out.println("Invalid age!");\r\n        }\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        // Creating a new Person object\r\n        Person person = new Person();\r\n        \r\n        // Setting the name and age using setter methods\r\n        person.setName("John Doe");\r\n        person.setAge(30);\r\n        \r\n        // Getting and printing the name and age using getter methods\r\n        System.out.println("Name: " + person.getName());\r\n        System.out.println("Age: " + person.getAge());\r\n        \r\n        // Attempting to set an invalid age\r\n        person.setAge(150); // Output: Invalid age!\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In this example, the ",(0,a.jsx)(t.code,{children:"Person"})," class encapsulates the ",(0,a.jsx)(t.code,{children:"name"})," and ",(0,a.jsx)(t.code,{children:"age"})," attributes by making them private and provides public getter and setter methods to access and modify them. The ",(0,a.jsx)(t.code,{children:"Main"})," class demonstrates how to create a ",(0,a.jsx)(t.code,{children:"Person"})," object, set its attributes using setter methods, and retrieve its attributes using getter methods. Additionally, the ",(0,a.jsx)(t.code,{children:"setAge()"})," method includes validation logic to ensure that the age is within a valid range. This demonstrates how encapsulation allows for controlled access and modification of the object's state."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);