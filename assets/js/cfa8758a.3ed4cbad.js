"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[7546],{8487:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(4848),t=r(8453);const i={sidebar_position:35},s="Java MultiThreading",o={id:"java/Java-MultiThreading",title:"Java-MultiThreading",description:"Multi-threading in Java allows concurrent execution of multiple threads within the same process. This enables developers to write programs that can perform multiple tasks simultaneously, enhancing performance and responsiveness. Here's a detailed explanation of multi-threading in Java with examples:",source:"@site/docs/java/Java-MultiThreading.md",sourceDirName:"java",slug:"/java/Java-MultiThreading",permalink:"/my-website-tutorial/docs/java/Java-MultiThreading",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-MultiThreading.md",tags:[],version:"current",sidebarPosition:35,frontMatter:{sidebar_position:35},sidebar:"tutorialSidebar",previous:{title:"Java-IO-Operations",permalink:"/my-website-tutorial/docs/java/Java-IO-Operations"},next:{title:"Java-Generics",permalink:"/my-website-tutorial/docs/java/Java-Generics"}},d={},c=[];function l(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Multi-threading in Java allows concurrent execution of multiple threads within the same process. This enables developers to write programs that can perform multiple tasks simultaneously, enhancing performance and responsiveness. Here's a detailed explanation of multi-threading in Java with examples:"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h1,{id:"java-multithreading",children:"Java MultiThreading"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Thread Creation"}),":\r\nIn Java, you can create threads by extending the ",(0,a.jsx)(n.code,{children:"Thread"})," class or implementing the ",(0,a.jsx)(n.code,{children:"Runnable"})," interface. Here's an example of both approaches:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Extending Thread class\r\nclass MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println("Thread running...");\r\n    }\r\n}\r\n\r\n// Implementing Runnable interface\r\nclass MyRunnable implements Runnable {\r\n    public void run() {\r\n        System.out.println("Runnable thread running...");\r\n    }\r\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Starting Threads"}),":\r\nAfter creating a thread, you need to start it using the ",(0,a.jsx)(n.code,{children:"start()"})," method. Starting a thread invokes the ",(0,a.jsx)(n.code,{children:"run()"})," method of the thread."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class Main {\r\n    public static void main(String[] args) {\r\n        // Using extended Thread\r\n        MyThread thread1 = new MyThread();\r\n        thread1.start();\r\n\r\n        // Using Runnable interface\r\n        Thread thread2 = new Thread(new MyRunnable());\r\n        thread2.start();\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Thread Synchronization"}),":\r\nWhen multiple threads access shared resources concurrently, it can lead to data inconsistency or race conditions. Java provides synchronization mechanisms like ",(0,a.jsx)(n.code,{children:"synchronized"})," blocks and methods to prevent such issues."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Counter {\r\n    private int count = 0;\r\n\r\n    public synchronized void increment() {\r\n        count++;\r\n    }\r\n\r\n    public synchronized int getCount() {\r\n        return count;\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Thread Joining"}),":\r\nThe ",(0,a.jsx)(n.code,{children:"join()"})," method allows one thread to wait for the completion of another thread before proceeding further."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class Main {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        MyThread thread1 = new MyThread();\r\n        thread1.start();\r\n        thread1.join(); // Main thread waits for thread1 to finish\r\n\r\n        System.out.println("Main thread continues...");\r\n    }\r\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Thread Priority"}),":\r\nJava allows you to set thread priority using the ",(0,a.jsx)(n.code,{children:"setPriority()"})," method. Higher priority threads get more CPU time compared to lower priority threads."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println("Thread priority: " + Thread.currentThread().getPriority());\r\n    }\r\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Daemon Threads"}),":\r\nDaemon threads are low-priority threads that run in the background and provide services to other threads. They automatically terminate when no other non-daemon threads are running."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class Main {\r\n    public static void main(String[] args) {\r\n        Thread daemonThread = new Thread(new MyRunnable());\r\n        daemonThread.setDaemon(true); // Set as daemon\r\n        daemonThread.start();\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Thread Pools"}),":\r\nJava provides ",(0,a.jsx)(n.code,{children:"ExecutorService"})," and ",(0,a.jsx)(n.code,{children:"ThreadPoolExecutor"})," classes to manage pools of threads, improving performance and resource management."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"ExecutorService executor = Executors.newFixedThreadPool(5);\r\nfor (int i = 0; i < 10; i++) {\r\n    Runnable worker = new MyRunnable();\r\n    executor.execute(worker);\r\n}\r\nexecutor.shutdown();\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"These are some of the key concepts and examples related to multi-threading in Java. Understanding and effectively utilizing multi-threading can greatly improve the performance and efficiency of your Java applications."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(6540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);