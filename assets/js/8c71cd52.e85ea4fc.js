"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[3012],{7214:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var a=r(4848),i=r(8453);const t={sidebar_position:33},s="Java File Handling",l={id:"java/Java-File-Handling",title:"Java-File-Handling",description:"File handling in Java involves reading from and writing to files on the system. Java provides various classes and methods for performing file operations.",source:"@site/docs/java/Java-File-Handling.md",sourceDirName:"java",slug:"/java/Java-File-Handling",permalink:"/my-website-tutorial/docs/java/Java-File-Handling",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-File-Handling.md",tags:[],version:"current",sidebarPosition:33,frontMatter:{sidebar_position:33},sidebar:"tutorialSidebar",previous:{title:"Java-Exception-Handling",permalink:"/my-website-tutorial/docs/java/Java-Exception-Handling"},next:{title:"Java-IO-Operations",permalink:"/my-website-tutorial/docs/java/Java-IO-Operations"}},o={},c=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"File handling in Java involves reading from and writing to files on the system. Java provides various classes and methods for performing file operations."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h1,{id:"java-file-handling",children:"Java File Handling"}),"\n",(0,a.jsx)(n.p,{children:"Here's a detailed explanation along with examples:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"File Class"}),": The ",(0,a.jsx)(n.code,{children:"java.io.File"})," class is used to represent a file or directory path in the system. It provides methods to perform operations such as creating, deleting, renaming, and checking the existence of files and directories."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.io.File;\r\n\r\npublic class FileExample {\r\n    public static void main(String[] args) {\r\n        // Creating a File object\r\n        File file = new File("example.txt");\r\n\r\n        // Check if the file exists\r\n        if (file.exists()) {\r\n            System.out.println("File exists.");\r\n        } else {\r\n            System.out.println("File does not exist.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"FileInputStream and FileOutputStream"}),": These classes are used for reading from and writing to files in binary mode. ",(0,a.jsx)(n.code,{children:"FileInputStream"})," reads bytes from a file, and ",(0,a.jsx)(n.code,{children:"FileOutputStream"})," writes bytes to a file."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example (Reading from a file):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.io.FileInputStream;\r\nimport java.io.IOException;\r\n\r\npublic class FileInputStreamExample {\r\n    public static void main(String[] args) {\r\n        try (FileInputStream fis = new FileInputStream("example.txt")) {\r\n            int data;\r\n            while ((data = fis.read()) != -1) {\r\n                System.out.print((char) data);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Example (Writing to a file):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\npublic class FileOutputStreamExample {\r\n    public static void main(String[] args) {\r\n        try (FileOutputStream fos = new FileOutputStream("example.txt")) {\r\n            String data = "Hello, world!";\r\n            fos.write(data.getBytes());\r\n            System.out.println("Data written to file.");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"BufferedReader and BufferedWriter"}),": These classes are used for reading from and writing to text files in character mode. ",(0,a.jsx)(n.code,{children:"BufferedReader"})," reads characters from a file, and ",(0,a.jsx)(n.code,{children:"BufferedWriter"})," writes characters to a file."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example (Reading from a file):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\npublic class BufferedReaderExample {\r\n    public static void main(String[] args) {\r\n        try (BufferedReader br = new BufferedReader(new FileReader("example.txt"))) {\r\n            String line;\r\n            while ((line = br.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Example (Writing to a file):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class BufferedWriterExample {\r\n    public static void main(String[] args) {\r\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter("example.txt"))) {\r\n            String data = "Hello, world!";\r\n            bw.write(data);\r\n            System.out.println("Data written to file.");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["These are just basic examples to get you started with file handling in Java. There are many more classes and methods available in the ",(0,a.jsx)(n.code,{children:"java.io"})," package for performing various file operations, such as random access, file locking, and directory manipulation."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var a=r(6540);const i={},t=a.createContext(i);function s(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);