"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[9932],{9770:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=r(4848),t=r(8453);const a={sidebar_position:36},i="Java Generics",c={id:"java/Java-Generics",title:"Java-Generics",description:"Generics in Java provide a way to create classes, interfaces, and methods that can operate on objects of various types while providing compile-time type safety. This allows you to write more flexible and reusable code by abstracting over types.",source:"@site/docs/java/Java-Generics.md",sourceDirName:"java",slug:"/java/Java-Generics",permalink:"/my-website-tutorial/docs/java/Java-Generics",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Generics.md",tags:[],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36},sidebar:"tutorialSidebar",previous:{title:"Java-MultiThreading",permalink:"/my-website-tutorial/docs/java/Java-MultiThreading"},next:{title:"Java-Enumerations",permalink:"/my-website-tutorial/docs/java/Java-Enumerations"}},o={},l=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Generics in Java provide a way to create classes, interfaces, and methods that can operate on objects of various types while providing compile-time type safety. This allows you to write more flexible and reusable code by abstracting over types."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"java-generics",children:"Java Generics"}),"\n",(0,s.jsx)(n.p,{children:"Here's a detailed explanation of generics in Java with examples:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Generic Classes"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["You can create generic classes by using type parameters. These type parameters are specified in angle brackets (",(0,s.jsx)(n.code,{children:"<>"}),") after the class name. Here's a basic example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Box<T> {\r\n    private T item;\r\n\r\n    public void setItem(T item) {\r\n        this.item = item;\r\n    }\r\n\r\n    public T getItem() {\r\n        return item;\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, ",(0,s.jsx)(n.code,{children:"T"})," is a type parameter that represents the type of the item stored in the ",(0,s.jsx)(n.code,{children:"Box"}),". You can use this ",(0,s.jsx)(n.code,{children:"Box"})," class with any type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Box<Integer> integerBox = new Box<>();\r\nintegerBox.setItem(123);\r\nint value = integerBox.getItem();  // No need to cast, type safety is ensured\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Generic Methods"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"You can also create generic methods within non-generic classes. Here's an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Utils {\r\n    public static <T> T getLastElement(T[] array) {\r\n        if (array == null || array.length == 0) {\r\n            return null;\r\n        }\r\n        return array[array.length - 1];\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the method ",(0,s.jsx)(n.code,{children:"getLastElement"})," is a generic method that works with arrays of any type. The type parameter ",(0,s.jsx)(n.code,{children:"T"})," is specified before the return type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'String[] names = {"Alice", "Bob", "Charlie"};\r\nString lastElement = Utils.getLastElement(names);\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bounded Type Parameters"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["You can restrict the types that can be used as type parameters by using bounded type parameters. This is done by specifying upper bounds using the ",(0,s.jsx)(n.code,{children:"extends"})," keyword or lower bounds using the ",(0,s.jsx)(n.code,{children:"super"})," keyword. Here's an example with an upper bound:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class NumberBox<T extends Number> {\r\n    private T item;\r\n\r\n    public void setItem(T item) {\r\n        this.item = item;\r\n    }\r\n\r\n    public T getItem() {\r\n        return item;\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, ",(0,s.jsx)(n.code,{children:"T"})," must be a subclass of ",(0,s.jsx)(n.code,{children:"Number"})," or ",(0,s.jsx)(n.code,{children:"Number"})," itself."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Wildcard Generic Types"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["Wildcard generic types allow you to specify an unknown type. There are two wildcard types: ",(0,s.jsx)(n.code,{children:"? extends T"})," (upper bounded wildcard) and ",(0,s.jsx)(n.code,{children:"? super T"})," (lower bounded wildcard). Here's an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public void printList(List<? extends Number> list) {\r\n    for (Number n : list) {\r\n        System.out.println(n);\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This method ",(0,s.jsx)(n.code,{children:"printList"})," can accept a list of any type that is a subclass of ",(0,s.jsx)(n.code,{children:"Number"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type Erasure"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"It's important to note that generics in Java are implemented using type erasure, which means that type information is removed at compile time. This is done to maintain backward compatibility with older versions of Java. As a result, generic types are only enforced at compile time and are not available at runtime."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"That's a detailed explanation of generics in Java with examples. Generics provide a powerful mechanism for writing more flexible and type-safe code in Java."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);