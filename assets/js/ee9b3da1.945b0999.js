"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[4251],{3774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=t(4848),a=t(8453);const i={sidebar_position:5},s="Java Comments",r={id:"java/Java-Comments",title:"Java-Comments",description:"Comments in Java are used to provide explanations or annotations within the source code. They are ignored by the compiler and have no effect on the execution of the program. Comments are essential for improving code readability, documenting code, and explaining the logic behind it. There are two types of comments in Java:",source:"@site/docs/java/Java-Comments.md",sourceDirName:"java",slug:"/java/Java-Comments",permalink:"/my-website-tutorial/docs/java/Java-Comments",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Java-Comments.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Java-Output",permalink:"/my-website-tutorial/docs/java/Java-Output"},next:{title:"Java.Variables",permalink:"/my-website-tutorial/docs/java/Java.Variables"}},l={},c=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Comments in Java are used to provide explanations or annotations within the source code. They are ignored by the compiler and have no effect on the execution of the program. Comments are essential for improving code readability, documenting code, and explaining the logic behind it. There are two types of comments in Java:"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"java-comments",children:"Java Comments"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Single-line Comments"}),": These comments begin with ",(0,o.jsx)(n.code,{children:"//"})," and continue until the end of the line."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// This is a single-line comment\r\nint age = 30; // Assigning a value to the variable age\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multi-line Comments (Block Comments)"}),": These comments start with ",(0,o.jsx)(n.code,{children:"/*"})," and end with ",(0,o.jsx)(n.code,{children:"*/"}),". They can span multiple lines."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"/*\r\nThis is a multi-line comment.\r\nIt can span across multiple lines\r\nand is useful for documenting\r\nlarger sections of code.\r\n*/\r\nint width = 100; // Variable width is assigned a value\n"})}),"\n",(0,o.jsx)(n.p,{children:"Comments can be used for various purposes, such as:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Providing explanations for complex code."}),"\n",(0,o.jsx)(n.li,{children:"Documenting the purpose of variables, methods, or classes."}),"\n",(0,o.jsx)(n.li,{children:"Adding TODOs or FIXMEs for future reference."}),"\n",(0,o.jsx)(n.li,{children:"Disabling code temporarily for debugging or testing purposes."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class HelloWorld {\r\n    public static void main(String[] args) {\r\n        // Print "Hello, World!" to the console\r\n        System.out.println("Hello, World!");\r\n        \r\n        /*\r\n        This block of code calculates the sum\r\n        of two integers and assigns the result\r\n        to the variable "total".\r\n        */\r\n        int num1 = 10;\r\n        int num2 = 20;\r\n        int total = num1 + num2; // Calculate the sum\r\n        System.out.println("The total is: " + total);\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"In the example above, single-line and multi-line comments are used to explain the purpose of the code and provide additional context for readers. They clarify the output of the program and document the logic behind it."})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const a={},i=o.createContext(a);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);